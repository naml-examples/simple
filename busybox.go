// Copyright © 2021 Kris Nóva <kris@nivenly.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//   ███╗   ██╗ █████╗ ███╗   ███╗██╗
//   ████╗  ██║██╔══██╗████╗ ████║██║
//   ██╔██╗ ██║███████║██╔████╔██║██║
//   ██║╚██╗██║██╔══██║██║╚██╔╝██║██║
//   ██║ ╚████║██║  ██║██║ ╚═╝ ██║███████╗
//   ╚═╝  ╚═══╝╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝
//

package main

import (
	"context"
	"fmt"
	"os"

	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"github.com/kris-nova/naml"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes"
)

var Version string = "0.0.1"

func main() {
	naml.Version = Version
	naml.Register(NewApp("AppInstance", "Application autogenerated from NAML v1.0.0"))
	err := naml.RunCommandLine()
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}
}

type App struct {
	naml.AppMeta
	objects []runtime.Object
}

func NewApp(name, description string) *App {
	return &App{
		AppMeta: naml.AppMeta{
			Description: description,
			ObjectMeta: metav1.ObjectMeta{
				Name:            name,
				ResourceVersion: Version,
			},
		},
	}
}

func (x *App) Install(client kubernetes.Interface) error {
	var err error

	busybox1Pod := &corev1.Pod{
		TypeMeta: metav1.TypeMeta{
			Kind:       "Pod",
			APIVersion: "corev1",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name:   "busybox1",
			Labels: map[string]string{"app": "busybox1"},
		},
		Spec: corev1.PodSpec{
			Containers: []corev1.Container{corev1.Container{
				Name:  "busybox",
				Image: "busybox",
				Command: []string{
					"sleep",
					"3600",
				},
				ImagePullPolicy: corev1.PullPolicy("IfNotPresent"),
			}},
			RestartPolicy: corev1.RestartPolicy("Always"),
		},
	}
	x.objects = append(x.objects, busybox1Pod)

	if client != nil {
		_, err = client.CoreV1().Pods("").Create(context.TODO(), busybox1Pod, metav1.CreateOptions{})
		if err != nil {
			return err
		}
	}

	return err
}

func (x *App) Uninstall(client kubernetes.Interface) error {
	var err error

	if client != nil {
		err = client.CoreV1().Pods("").Delete(context.TODO(), "busybox1", metav1.DeleteOptions{})
		if err != nil {
			return err
		}
	}

	return err
}

func (x *App) Meta() *naml.AppMeta {
	return &x.AppMeta
}

func (x *App) Objects() []runtime.Object {
	return x.objects
}

